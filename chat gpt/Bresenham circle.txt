Implement Bresenham circle drawing algorithm to draw any object. The object should be displayed in all the quadrants with respect to center and radius

#include <GL/glut.h>
#include <iostream>
#include <math.h>

// Function to plot symmetrical points of the circle
void plotCirclePoints(int xc, int yc, int x, int y) {
    glBegin(GL_POINTS);
    glVertex2i(xc + x, yc + y);
    glVertex2i(xc - x, yc + y);
    glVertex2i(xc + x, yc - y);
    glVertex2i(xc - x, yc - y);
    glVertex2i(xc + y, yc + x);
    glVertex2i(xc - y, yc + x);
    glVertex2i(xc + y, yc - x);
    glVertex2i(xc - y, yc - x);
    glEnd();
}

// Bresenham Circle Drawing Algorithm
void drawCircle(int xc, int yc, int r) {
    int x = 0, y = r;
    int d = 3 - 2 * r;

    while (x <= y) {
        plotCirclePoints(xc, yc, x, y);
        if (d < 0)
            d += 4 * x + 6;
        else {
            d += 4 * (x - y) + 10;
            y--;
        }
        x++;
    }
}

// Object made using 3 circles (e.g., Mickey Mouse face)
void drawObject(int xc, int yc, int r) {
    drawCircle(xc, yc, r);               // Main circle (face)
    drawCircle(xc - r, yc + r, r / 2);   // Left ear
    drawCircle(xc + r, yc + r, r / 2);   // Right ear
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(1.0, 0.5, 0.0); // Orange

    int r = 40;

    // Draw object in all 4 quadrants
    drawObject(100, 100, r);    // Quadrant I
    drawObject(-100, 100, r);   // Quadrant II
    drawObject(-100, -100, r);  // Quadrant III
    drawObject(100, -100, r);   // Quadrant IV

    glFlush();
}

void init() {
    glClearColor(0.0, 0.0, 0.0, 1.0);       // Black background
    gluOrtho2D(-250, 250, -250, 250);       // Set origin at center
    glPointSize(2.0);                       // Point size
}

int main(int argc, char **argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(500, 500);
    glutCreateWindow("Bresenham Circle Drawing in All Quadrants");

    init();
    glutDisplayFunc(display);
    glutMainLoop();

    return 0;
}
