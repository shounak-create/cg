10)Generate fractal patterns using i) Bezier.
Code:
#include <GL/glut.h>
#include <cmath>

void drawBezier(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4, int depth) {
    if (depth == 0) {
        glBegin(GL_LINES);
        glVertex2f(x1, y1);
        glVertex2f(x4, y4);
        glEnd();
        return;
    }

    // Calculate midpoints for the Bezier curve
    float x12 = (x1 + x2) / 2;
    float y12 = (y1 + y2) / 2;
    float x23 = (x2 + x3) / 2;
    float y23 = (y2 + y3) / 2;
    float x34 = (x3 + x4) / 2;
    float y34 = (y3 + y4) / 2;

    float x123 = (x12 + x23) / 2;
    float y123 = (y12 + y23) / 2;
    float x234 = (x23 + x34) / 2;
    float y234 = (y23 + y34) / 2;

    float x1234 = (x123 + x234) / 2;
    float y1234 = (y123 + y234) / 2;

    // Recursive call for both halves of the curve
    drawBezier(x1, y1, x12, y12, x123, y123, x1234, y1234, depth - 1);
    drawBezier(x1234, y1234, x234, y234, x34, y34, x4, y4, depth - 1);
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(1.0, 1.0, 1.0);  // Set color to white
    drawBezier(100, 100, 150, 200, 350, 200, 400, 100, 5);  // Draw the Bezier curve with fractal depth 5
    glFlush();
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(500, 500);
    glutCreateWindow("Bezier Fractal");

    glClearColor(0.0, 0.0, 0.0, 0.0);  // Set the background color to black
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0, 500, 0, 500);  // Set up orthogonal 2D projection

    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}