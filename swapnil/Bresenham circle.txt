3)Implement Bresenham circle drawing algorithm to draw any object. The object
should be displayed in all the quadrants with respect to center and radius.
Code:
#include <GL/glut.h>

// Window size
int width = 800, height = 800;
int radius = 100;

// Draw a single pixel
void drawPixel(int x, int y) {
    glBegin(GL_POINTS);
    glVertex2i(x, y);
    glEnd();
}

// Draw 8 symmetric points for the circle
void drawCirclePoints(int xc, int yc, int x, int y) {
    drawPixel(xc + x, yc + y);
    drawPixel(xc - x, yc + y);
    drawPixel(xc + x, yc - y);
    drawPixel(xc - x, yc - y);
    drawPixel(xc + y, yc + x);
    drawPixel(xc - y, yc + x);
    drawPixel(xc + y, yc - x);
    drawPixel(xc - y, yc - x);
}

// Bresenham Circle Drawing
void drawCircle(int xc, int yc, int r) {
    int x = 0, y = r;
    int d = 3 - 2 * r;

    while (x <= y) {
        drawCirclePoints(xc, yc, x, y);
        if (d < 0)
            d += 4 * x + 6;
        else {
            d += 4 * (x - y) + 10;
            y--;
        }
        x++;
    }
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(1, 0, 0); // Red color
    drawCircle(0, 0, radius); // Draw the circle at origin
    glFlush();
}

void init() {
    glClearColor(0, 0, 0, 0); // Black background
    gluOrtho2D(-width / 2, width / 2, -height / 2, height / 2); // Set origin at center
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(width, height);
    glutCreateWindow("Bresenham Circle - Clean Window");
    init();
    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}
