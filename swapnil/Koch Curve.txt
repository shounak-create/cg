11)Generate fractal patterns using i) Koch Curve.
Code:
#include <GL/glut.h>
#include <cmath>

// Recursive function to draw the Koch curve
void drawKoch(float x1, float y1, float x2, float y2, int depth) {
    if (depth == 0) {
        glBegin(GL_LINES);
        glVertex2f(x1, y1);
        glVertex2f(x2, y2);
        glEnd();
        return;
    }

    // Calculate the intermediate points
    float deltaX = x2 - x1;
    float deltaY = y2 - y1;

    // Points B and C are the divisions of the line into three parts
    float xB = x1 + deltaX / 3;
    float yB = y1 + deltaY / 3;
    float xC = x1 + 2 * deltaX / 3;
    float yC = y1 + 2 * deltaY / 3;

    // Point D is the peak of the equilateral triangle
    float xD = xB + (deltaX * cos(60 * M_PI / 180) - deltaY * sin(60 * M_PI / 180)) / 3;
    float yD = yB + (deltaX * sin(60 * M_PI / 180) + deltaY * cos(60 * M_PI / 180)) / 3;

    // Recursively draw the smaller segments
    drawKoch(x1, y1, xB, yB, depth - 1);
    drawKoch(xB, yB, xD, yD, depth - 1);
    drawKoch(xD, yD, xC, yC, depth - 1);
    drawKoch(xC, yC, x2, y2, depth - 1);
}

// Function to display the Koch curve
void displayKoch() {
    glClear(GL_COLOR_BUFFER_BIT);   // Clear the screen
    glColor3f(1.0, 1.0, 1.0);       // Set the color to white
    drawKoch(100, 100, 400, 100, 4); // Draw the Koch curve with depth 4
    glFlush();                      // Render the result
}

// Main function
int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);  // Single buffer and RGB color mode
    glutInitWindowSize(500, 500);                 // Window size
    glutCreateWindow("Koch Curve Fractal");       // Window title

    glClearColor(0.0, 0.0, 0.0, 1.0);            // Set the background color to black
    glMatrixMode(GL_PROJECTION);                  // Set the projection mode
    glLoadIdentity();                             // Reset the matrix
    gluOrtho2D(0, 500, 0, 500);                  // Set the 2D orthographic projection

    glutDisplayFunc(displayKoch);   // Set the display callback function
    glutMainLoop();                 // Enter the GLUT event processing loop

    return 0;
}
